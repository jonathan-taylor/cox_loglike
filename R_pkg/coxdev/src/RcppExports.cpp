// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/coxdev.h"
#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// forward_cumsum
void forward_cumsum(const EIGEN_REF<Eigen::VectorXd> sequence, EIGEN_REF<Eigen::VectorXd> output);
RcppExport SEXP _coxdev_forward_cumsum(SEXP sequenceSEXP, SEXP outputSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const EIGEN_REF<Eigen::VectorXd> >::type sequence(sequenceSEXP);
    Rcpp::traits::input_parameter< EIGEN_REF<Eigen::VectorXd> >::type output(outputSEXP);
    forward_cumsum(sequence, output);
    return R_NilValue;
END_RCPP
}
// reverse_cumsums
void reverse_cumsums(const EIGEN_REF<Eigen::VectorXd> sequence, EIGEN_REF<Eigen::VectorXd> event_buffer, EIGEN_REF<Eigen::VectorXd> start_buffer, const EIGEN_REF<Eigen::VectorXi> event_order, const EIGEN_REF<Eigen::VectorXi> start_order, bool do_event, bool do_start);
RcppExport SEXP _coxdev_reverse_cumsums(SEXP sequenceSEXP, SEXP event_bufferSEXP, SEXP start_bufferSEXP, SEXP event_orderSEXP, SEXP start_orderSEXP, SEXP do_eventSEXP, SEXP do_startSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const EIGEN_REF<Eigen::VectorXd> >::type sequence(sequenceSEXP);
    Rcpp::traits::input_parameter< EIGEN_REF<Eigen::VectorXd> >::type event_buffer(event_bufferSEXP);
    Rcpp::traits::input_parameter< EIGEN_REF<Eigen::VectorXd> >::type start_buffer(start_bufferSEXP);
    Rcpp::traits::input_parameter< const EIGEN_REF<Eigen::VectorXi> >::type event_order(event_orderSEXP);
    Rcpp::traits::input_parameter< const EIGEN_REF<Eigen::VectorXi> >::type start_order(start_orderSEXP);
    Rcpp::traits::input_parameter< bool >::type do_event(do_eventSEXP);
    Rcpp::traits::input_parameter< bool >::type do_start(do_startSEXP);
    reverse_cumsums(sequence, event_buffer, start_buffer, event_order, start_order, do_event, do_start);
    return R_NilValue;
END_RCPP
}
// to_native_from_event
void to_native_from_event(EIGEN_REF<Eigen::VectorXd> arg, const EIGEN_REF<Eigen::VectorXi> event_order, EIGEN_REF<Eigen::VectorXd> reorder_buffer);
RcppExport SEXP _coxdev_to_native_from_event(SEXP argSEXP, SEXP event_orderSEXP, SEXP reorder_bufferSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< EIGEN_REF<Eigen::VectorXd> >::type arg(argSEXP);
    Rcpp::traits::input_parameter< const EIGEN_REF<Eigen::VectorXi> >::type event_order(event_orderSEXP);
    Rcpp::traits::input_parameter< EIGEN_REF<Eigen::VectorXd> >::type reorder_buffer(reorder_bufferSEXP);
    to_native_from_event(arg, event_order, reorder_buffer);
    return R_NilValue;
END_RCPP
}
// to_event_from_native
void to_event_from_native(const EIGEN_REF<Eigen::VectorXd> arg, const EIGEN_REF<Eigen::VectorXi> event_order, EIGEN_REF<Eigen::VectorXd> reorder_buffer);
RcppExport SEXP _coxdev_to_event_from_native(SEXP argSEXP, SEXP event_orderSEXP, SEXP reorder_bufferSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const EIGEN_REF<Eigen::VectorXd> >::type arg(argSEXP);
    Rcpp::traits::input_parameter< const EIGEN_REF<Eigen::VectorXi> >::type event_order(event_orderSEXP);
    Rcpp::traits::input_parameter< EIGEN_REF<Eigen::VectorXd> >::type reorder_buffer(reorder_bufferSEXP);
    to_event_from_native(arg, event_order, reorder_buffer);
    return R_NilValue;
END_RCPP
}
// forward_prework
void forward_prework(const EIGEN_REF<Eigen::VectorXi> status, const EIGEN_REF<Eigen::VectorXd> w_avg, const EIGEN_REF<Eigen::VectorXd> scaling, const EIGEN_REF<Eigen::VectorXd> risk_sums, int i, int j, EIGEN_REF<Eigen::VectorXd> moment_buffer, const EIGEN_REF<Eigen::VectorXd> arg, bool use_w_avg);
RcppExport SEXP _coxdev_forward_prework(SEXP statusSEXP, SEXP w_avgSEXP, SEXP scalingSEXP, SEXP risk_sumsSEXP, SEXP iSEXP, SEXP jSEXP, SEXP moment_bufferSEXP, SEXP argSEXP, SEXP use_w_avgSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const EIGEN_REF<Eigen::VectorXi> >::type status(statusSEXP);
    Rcpp::traits::input_parameter< const EIGEN_REF<Eigen::VectorXd> >::type w_avg(w_avgSEXP);
    Rcpp::traits::input_parameter< const EIGEN_REF<Eigen::VectorXd> >::type scaling(scalingSEXP);
    Rcpp::traits::input_parameter< const EIGEN_REF<Eigen::VectorXd> >::type risk_sums(risk_sumsSEXP);
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    Rcpp::traits::input_parameter< int >::type j(jSEXP);
    Rcpp::traits::input_parameter< EIGEN_REF<Eigen::VectorXd> >::type moment_buffer(moment_bufferSEXP);
    Rcpp::traits::input_parameter< const EIGEN_REF<Eigen::VectorXd> >::type arg(argSEXP);
    Rcpp::traits::input_parameter< bool >::type use_w_avg(use_w_avgSEXP);
    forward_prework(status, w_avg, scaling, risk_sums, i, j, moment_buffer, arg, use_w_avg);
    return R_NilValue;
END_RCPP
}
// compute_sat_loglik
double compute_sat_loglik(const EIGEN_REF<Eigen::VectorXi> first, const EIGEN_REF<Eigen::VectorXi> last, const EIGEN_REF<Eigen::VectorXd> weight, const EIGEN_REF<Eigen::VectorXi> event_order, const EIGEN_REF<Eigen::VectorXi> status, EIGEN_REF<Eigen::VectorXd> W_status);
RcppExport SEXP _coxdev_compute_sat_loglik(SEXP firstSEXP, SEXP lastSEXP, SEXP weightSEXP, SEXP event_orderSEXP, SEXP statusSEXP, SEXP W_statusSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const EIGEN_REF<Eigen::VectorXi> >::type first(firstSEXP);
    Rcpp::traits::input_parameter< const EIGEN_REF<Eigen::VectorXi> >::type last(lastSEXP);
    Rcpp::traits::input_parameter< const EIGEN_REF<Eigen::VectorXd> >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< const EIGEN_REF<Eigen::VectorXi> >::type event_order(event_orderSEXP);
    Rcpp::traits::input_parameter< const EIGEN_REF<Eigen::VectorXi> >::type status(statusSEXP);
    Rcpp::traits::input_parameter< EIGEN_REF<Eigen::VectorXd> >::type W_status(W_statusSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_sat_loglik(first, last, weight, event_order, status, W_status));
    return rcpp_result_gen;
END_RCPP
}
// sum_over_events
void sum_over_events(const EIGEN_REF<Eigen::VectorXi> event_order, const EIGEN_REF<Eigen::VectorXi> start_order, const EIGEN_REF<Eigen::VectorXi> first, const EIGEN_REF<Eigen::VectorXi> last, const EIGEN_REF<Eigen::VectorXi> start_map, const EIGEN_REF<Eigen::VectorXd> scaling, const EIGEN_REF<Eigen::VectorXi> status, bool efron, BUFFER_LIST forward_cumsum_buffers, EIGEN_REF<Eigen::VectorXd> forward_scratch_buffer, EIGEN_REF<Eigen::VectorXd> value_buffer);
RcppExport SEXP _coxdev_sum_over_events(SEXP event_orderSEXP, SEXP start_orderSEXP, SEXP firstSEXP, SEXP lastSEXP, SEXP start_mapSEXP, SEXP scalingSEXP, SEXP statusSEXP, SEXP efronSEXP, SEXP forward_cumsum_buffersSEXP, SEXP forward_scratch_bufferSEXP, SEXP value_bufferSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const EIGEN_REF<Eigen::VectorXi> >::type event_order(event_orderSEXP);
    Rcpp::traits::input_parameter< const EIGEN_REF<Eigen::VectorXi> >::type start_order(start_orderSEXP);
    Rcpp::traits::input_parameter< const EIGEN_REF<Eigen::VectorXi> >::type first(firstSEXP);
    Rcpp::traits::input_parameter< const EIGEN_REF<Eigen::VectorXi> >::type last(lastSEXP);
    Rcpp::traits::input_parameter< const EIGEN_REF<Eigen::VectorXi> >::type start_map(start_mapSEXP);
    Rcpp::traits::input_parameter< const EIGEN_REF<Eigen::VectorXd> >::type scaling(scalingSEXP);
    Rcpp::traits::input_parameter< const EIGEN_REF<Eigen::VectorXi> >::type status(statusSEXP);
    Rcpp::traits::input_parameter< bool >::type efron(efronSEXP);
    Rcpp::traits::input_parameter< BUFFER_LIST >::type forward_cumsum_buffers(forward_cumsum_buffersSEXP);
    Rcpp::traits::input_parameter< EIGEN_REF<Eigen::VectorXd> >::type forward_scratch_buffer(forward_scratch_bufferSEXP);
    Rcpp::traits::input_parameter< EIGEN_REF<Eigen::VectorXd> >::type value_buffer(value_bufferSEXP);
    sum_over_events(event_order, start_order, first, last, start_map, scaling, status, efron, forward_cumsum_buffers, forward_scratch_buffer, value_buffer);
    return R_NilValue;
END_RCPP
}
// sum_over_risk_set
void sum_over_risk_set(const EIGEN_REF<Eigen::VectorXd> arg, const EIGEN_REF<Eigen::VectorXi> event_order, const EIGEN_REF<Eigen::VectorXi> start_order, const EIGEN_REF<Eigen::VectorXi> first, const EIGEN_REF<Eigen::VectorXi> last, const EIGEN_REF<Eigen::VectorXi> event_map, const EIGEN_REF<Eigen::VectorXd> scaling, bool efron, BUFFER_LIST risk_sum_buffers, int risk_sum_buffers_offset, BUFFER_LIST reverse_cumsum_buffers, int reverse_cumsum_buffers_offset);
RcppExport SEXP _coxdev_sum_over_risk_set(SEXP argSEXP, SEXP event_orderSEXP, SEXP start_orderSEXP, SEXP firstSEXP, SEXP lastSEXP, SEXP event_mapSEXP, SEXP scalingSEXP, SEXP efronSEXP, SEXP risk_sum_buffersSEXP, SEXP risk_sum_buffers_offsetSEXP, SEXP reverse_cumsum_buffersSEXP, SEXP reverse_cumsum_buffers_offsetSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const EIGEN_REF<Eigen::VectorXd> >::type arg(argSEXP);
    Rcpp::traits::input_parameter< const EIGEN_REF<Eigen::VectorXi> >::type event_order(event_orderSEXP);
    Rcpp::traits::input_parameter< const EIGEN_REF<Eigen::VectorXi> >::type start_order(start_orderSEXP);
    Rcpp::traits::input_parameter< const EIGEN_REF<Eigen::VectorXi> >::type first(firstSEXP);
    Rcpp::traits::input_parameter< const EIGEN_REF<Eigen::VectorXi> >::type last(lastSEXP);
    Rcpp::traits::input_parameter< const EIGEN_REF<Eigen::VectorXi> >::type event_map(event_mapSEXP);
    Rcpp::traits::input_parameter< const EIGEN_REF<Eigen::VectorXd> >::type scaling(scalingSEXP);
    Rcpp::traits::input_parameter< bool >::type efron(efronSEXP);
    Rcpp::traits::input_parameter< BUFFER_LIST >::type risk_sum_buffers(risk_sum_buffersSEXP);
    Rcpp::traits::input_parameter< int >::type risk_sum_buffers_offset(risk_sum_buffers_offsetSEXP);
    Rcpp::traits::input_parameter< BUFFER_LIST >::type reverse_cumsum_buffers(reverse_cumsum_buffersSEXP);
    Rcpp::traits::input_parameter< int >::type reverse_cumsum_buffers_offset(reverse_cumsum_buffers_offsetSEXP);
    sum_over_risk_set(arg, event_order, start_order, first, last, event_map, scaling, efron, risk_sum_buffers, risk_sum_buffers_offset, reverse_cumsum_buffers, reverse_cumsum_buffers_offset);
    return R_NilValue;
END_RCPP
}
// cox_dev
double cox_dev(const EIGEN_REF<Eigen::VectorXd> eta, const EIGEN_REF<Eigen::VectorXd> sample_weight, const EIGEN_REF<Eigen::VectorXd> exp_w, const EIGEN_REF<Eigen::VectorXi> event_order, const EIGEN_REF<Eigen::VectorXi> start_order, const EIGEN_REF<Eigen::VectorXi> status, const EIGEN_REF<Eigen::VectorXi> first, const EIGEN_REF<Eigen::VectorXi> last, const EIGEN_REF<Eigen::VectorXd> scaling, const EIGEN_REF<Eigen::VectorXi> event_map, const EIGEN_REF<Eigen::VectorXi> start_map, double loglik_sat, EIGEN_REF<Eigen::VectorXd> T_1_term, EIGEN_REF<Eigen::VectorXd> T_2_term, EIGEN_REF<Eigen::VectorXd> grad_buffer, EIGEN_REF<Eigen::VectorXd> diag_hessian_buffer, EIGEN_REF<Eigen::VectorXd> diag_part_buffer, EIGEN_REF<Eigen::VectorXd> w_avg_buffer, BUFFER_LIST event_reorder_buffers, BUFFER_LIST risk_sum_buffers, BUFFER_LIST forward_cumsum_buffers, EIGEN_REF<Eigen::VectorXd> forward_scratch_buffer, BUFFER_LIST reverse_cumsum_buffers, bool have_start_times, bool efron);
RcppExport SEXP _coxdev_cox_dev(SEXP etaSEXP, SEXP sample_weightSEXP, SEXP exp_wSEXP, SEXP event_orderSEXP, SEXP start_orderSEXP, SEXP statusSEXP, SEXP firstSEXP, SEXP lastSEXP, SEXP scalingSEXP, SEXP event_mapSEXP, SEXP start_mapSEXP, SEXP loglik_satSEXP, SEXP T_1_termSEXP, SEXP T_2_termSEXP, SEXP grad_bufferSEXP, SEXP diag_hessian_bufferSEXP, SEXP diag_part_bufferSEXP, SEXP w_avg_bufferSEXP, SEXP event_reorder_buffersSEXP, SEXP risk_sum_buffersSEXP, SEXP forward_cumsum_buffersSEXP, SEXP forward_scratch_bufferSEXP, SEXP reverse_cumsum_buffersSEXP, SEXP have_start_timesSEXP, SEXP efronSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const EIGEN_REF<Eigen::VectorXd> >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< const EIGEN_REF<Eigen::VectorXd> >::type sample_weight(sample_weightSEXP);
    Rcpp::traits::input_parameter< const EIGEN_REF<Eigen::VectorXd> >::type exp_w(exp_wSEXP);
    Rcpp::traits::input_parameter< const EIGEN_REF<Eigen::VectorXi> >::type event_order(event_orderSEXP);
    Rcpp::traits::input_parameter< const EIGEN_REF<Eigen::VectorXi> >::type start_order(start_orderSEXP);
    Rcpp::traits::input_parameter< const EIGEN_REF<Eigen::VectorXi> >::type status(statusSEXP);
    Rcpp::traits::input_parameter< const EIGEN_REF<Eigen::VectorXi> >::type first(firstSEXP);
    Rcpp::traits::input_parameter< const EIGEN_REF<Eigen::VectorXi> >::type last(lastSEXP);
    Rcpp::traits::input_parameter< const EIGEN_REF<Eigen::VectorXd> >::type scaling(scalingSEXP);
    Rcpp::traits::input_parameter< const EIGEN_REF<Eigen::VectorXi> >::type event_map(event_mapSEXP);
    Rcpp::traits::input_parameter< const EIGEN_REF<Eigen::VectorXi> >::type start_map(start_mapSEXP);
    Rcpp::traits::input_parameter< double >::type loglik_sat(loglik_satSEXP);
    Rcpp::traits::input_parameter< EIGEN_REF<Eigen::VectorXd> >::type T_1_term(T_1_termSEXP);
    Rcpp::traits::input_parameter< EIGEN_REF<Eigen::VectorXd> >::type T_2_term(T_2_termSEXP);
    Rcpp::traits::input_parameter< EIGEN_REF<Eigen::VectorXd> >::type grad_buffer(grad_bufferSEXP);
    Rcpp::traits::input_parameter< EIGEN_REF<Eigen::VectorXd> >::type diag_hessian_buffer(diag_hessian_bufferSEXP);
    Rcpp::traits::input_parameter< EIGEN_REF<Eigen::VectorXd> >::type diag_part_buffer(diag_part_bufferSEXP);
    Rcpp::traits::input_parameter< EIGEN_REF<Eigen::VectorXd> >::type w_avg_buffer(w_avg_bufferSEXP);
    Rcpp::traits::input_parameter< BUFFER_LIST >::type event_reorder_buffers(event_reorder_buffersSEXP);
    Rcpp::traits::input_parameter< BUFFER_LIST >::type risk_sum_buffers(risk_sum_buffersSEXP);
    Rcpp::traits::input_parameter< BUFFER_LIST >::type forward_cumsum_buffers(forward_cumsum_buffersSEXP);
    Rcpp::traits::input_parameter< EIGEN_REF<Eigen::VectorXd> >::type forward_scratch_buffer(forward_scratch_bufferSEXP);
    Rcpp::traits::input_parameter< BUFFER_LIST >::type reverse_cumsum_buffers(reverse_cumsum_buffersSEXP);
    Rcpp::traits::input_parameter< bool >::type have_start_times(have_start_timesSEXP);
    Rcpp::traits::input_parameter< bool >::type efron(efronSEXP);
    rcpp_result_gen = Rcpp::wrap(cox_dev(eta, sample_weight, exp_w, event_order, start_order, status, first, last, scaling, event_map, start_map, loglik_sat, T_1_term, T_2_term, grad_buffer, diag_hessian_buffer, diag_part_buffer, w_avg_buffer, event_reorder_buffers, risk_sum_buffers, forward_cumsum_buffers, forward_scratch_buffer, reverse_cumsum_buffers, have_start_times, efron));
    return rcpp_result_gen;
END_RCPP
}
// hessian_matvec
HESSIAN_MATVEC_TYPE hessian_matvec(const EIGEN_REF<Eigen::VectorXd> arg, const EIGEN_REF<Eigen::VectorXd> eta, const EIGEN_REF<Eigen::VectorXd> sample_weight, const EIGEN_REF<Eigen::VectorXd> risk_sums, const EIGEN_REF<Eigen::VectorXd> diag_part, const EIGEN_REF<Eigen::VectorXd> w_avg, const EIGEN_REF<Eigen::VectorXd> exp_w, const EIGEN_REF<Eigen::VectorXd> event_cumsum, const EIGEN_REF<Eigen::VectorXd> start_cumsum, const EIGEN_REF<Eigen::VectorXi> event_order, const EIGEN_REF<Eigen::VectorXi> start_order, const EIGEN_REF<Eigen::VectorXi> status, const EIGEN_REF<Eigen::VectorXi> first, const EIGEN_REF<Eigen::VectorXi> last, const EIGEN_REF<Eigen::VectorXd> scaling, const EIGEN_REF<Eigen::VectorXi> event_map, const EIGEN_REF<Eigen::VectorXi> start_map, BUFFER_LIST risk_sum_buffers, BUFFER_LIST forward_cumsum_buffers, EIGEN_REF<Eigen::VectorXd> forward_scratch_buffer, BUFFER_LIST reverse_cumsum_buffers, EIGEN_REF<Eigen::VectorXd> hess_matvec_buffer, bool have_start_times, bool efron);
RcppExport SEXP _coxdev_hessian_matvec(SEXP argSEXP, SEXP etaSEXP, SEXP sample_weightSEXP, SEXP risk_sumsSEXP, SEXP diag_partSEXP, SEXP w_avgSEXP, SEXP exp_wSEXP, SEXP event_cumsumSEXP, SEXP start_cumsumSEXP, SEXP event_orderSEXP, SEXP start_orderSEXP, SEXP statusSEXP, SEXP firstSEXP, SEXP lastSEXP, SEXP scalingSEXP, SEXP event_mapSEXP, SEXP start_mapSEXP, SEXP risk_sum_buffersSEXP, SEXP forward_cumsum_buffersSEXP, SEXP forward_scratch_bufferSEXP, SEXP reverse_cumsum_buffersSEXP, SEXP hess_matvec_bufferSEXP, SEXP have_start_timesSEXP, SEXP efronSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const EIGEN_REF<Eigen::VectorXd> >::type arg(argSEXP);
    Rcpp::traits::input_parameter< const EIGEN_REF<Eigen::VectorXd> >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< const EIGEN_REF<Eigen::VectorXd> >::type sample_weight(sample_weightSEXP);
    Rcpp::traits::input_parameter< const EIGEN_REF<Eigen::VectorXd> >::type risk_sums(risk_sumsSEXP);
    Rcpp::traits::input_parameter< const EIGEN_REF<Eigen::VectorXd> >::type diag_part(diag_partSEXP);
    Rcpp::traits::input_parameter< const EIGEN_REF<Eigen::VectorXd> >::type w_avg(w_avgSEXP);
    Rcpp::traits::input_parameter< const EIGEN_REF<Eigen::VectorXd> >::type exp_w(exp_wSEXP);
    Rcpp::traits::input_parameter< const EIGEN_REF<Eigen::VectorXd> >::type event_cumsum(event_cumsumSEXP);
    Rcpp::traits::input_parameter< const EIGEN_REF<Eigen::VectorXd> >::type start_cumsum(start_cumsumSEXP);
    Rcpp::traits::input_parameter< const EIGEN_REF<Eigen::VectorXi> >::type event_order(event_orderSEXP);
    Rcpp::traits::input_parameter< const EIGEN_REF<Eigen::VectorXi> >::type start_order(start_orderSEXP);
    Rcpp::traits::input_parameter< const EIGEN_REF<Eigen::VectorXi> >::type status(statusSEXP);
    Rcpp::traits::input_parameter< const EIGEN_REF<Eigen::VectorXi> >::type first(firstSEXP);
    Rcpp::traits::input_parameter< const EIGEN_REF<Eigen::VectorXi> >::type last(lastSEXP);
    Rcpp::traits::input_parameter< const EIGEN_REF<Eigen::VectorXd> >::type scaling(scalingSEXP);
    Rcpp::traits::input_parameter< const EIGEN_REF<Eigen::VectorXi> >::type event_map(event_mapSEXP);
    Rcpp::traits::input_parameter< const EIGEN_REF<Eigen::VectorXi> >::type start_map(start_mapSEXP);
    Rcpp::traits::input_parameter< BUFFER_LIST >::type risk_sum_buffers(risk_sum_buffersSEXP);
    Rcpp::traits::input_parameter< BUFFER_LIST >::type forward_cumsum_buffers(forward_cumsum_buffersSEXP);
    Rcpp::traits::input_parameter< EIGEN_REF<Eigen::VectorXd> >::type forward_scratch_buffer(forward_scratch_bufferSEXP);
    Rcpp::traits::input_parameter< BUFFER_LIST >::type reverse_cumsum_buffers(reverse_cumsum_buffersSEXP);
    Rcpp::traits::input_parameter< EIGEN_REF<Eigen::VectorXd> >::type hess_matvec_buffer(hess_matvec_bufferSEXP);
    Rcpp::traits::input_parameter< bool >::type have_start_times(have_start_timesSEXP);
    Rcpp::traits::input_parameter< bool >::type efron(efronSEXP);
    rcpp_result_gen = Rcpp::wrap(hessian_matvec(arg, eta, sample_weight, risk_sums, diag_part, w_avg, exp_w, event_cumsum, start_cumsum, event_order, start_order, status, first, last, scaling, event_map, start_map, risk_sum_buffers, forward_cumsum_buffers, forward_scratch_buffer, reverse_cumsum_buffers, hess_matvec_buffer, have_start_times, efron));
    return rcpp_result_gen;
END_RCPP
}
// preprocess
PREPROCESS_TYPE preprocess(const EIGEN_REF<Eigen::VectorXd> start, const EIGEN_REF<Eigen::VectorXd> event, const EIGEN_REF<Eigen::VectorXi> status);
RcppExport SEXP _coxdev_preprocess(SEXP startSEXP, SEXP eventSEXP, SEXP statusSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const EIGEN_REF<Eigen::VectorXd> >::type start(startSEXP);
    Rcpp::traits::input_parameter< const EIGEN_REF<Eigen::VectorXd> >::type event(eventSEXP);
    Rcpp::traits::input_parameter< const EIGEN_REF<Eigen::VectorXi> >::type status(statusSEXP);
    rcpp_result_gen = Rcpp::wrap(preprocess(start, event, status));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_coxdev_forward_cumsum", (DL_FUNC) &_coxdev_forward_cumsum, 2},
    {"_coxdev_reverse_cumsums", (DL_FUNC) &_coxdev_reverse_cumsums, 7},
    {"_coxdev_to_native_from_event", (DL_FUNC) &_coxdev_to_native_from_event, 3},
    {"_coxdev_to_event_from_native", (DL_FUNC) &_coxdev_to_event_from_native, 3},
    {"_coxdev_forward_prework", (DL_FUNC) &_coxdev_forward_prework, 9},
    {"_coxdev_compute_sat_loglik", (DL_FUNC) &_coxdev_compute_sat_loglik, 6},
    {"_coxdev_sum_over_events", (DL_FUNC) &_coxdev_sum_over_events, 11},
    {"_coxdev_sum_over_risk_set", (DL_FUNC) &_coxdev_sum_over_risk_set, 12},
    {"_coxdev_cox_dev", (DL_FUNC) &_coxdev_cox_dev, 25},
    {"_coxdev_hessian_matvec", (DL_FUNC) &_coxdev_hessian_matvec, 24},
    {"_coxdev_preprocess", (DL_FUNC) &_coxdev_preprocess, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_coxdev(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
